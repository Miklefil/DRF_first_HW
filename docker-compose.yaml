version: '3.9'

services:
  redis:
    image: redis
    container_name: redis
    ports:
      - '6379:6379'

  postgres:
    image: postgres
    restart: always
    container_name: postgres
    env_file:
      - .env.docker
    environment:
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/pgdata
    ports:
      - '5432:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: .
    container_name: app
#    command: sh -c "python manage.py migrate && python manage.py && python manage.py collectstatic && python manage.py runserver 0.0.0.0:8000"
#    command: sh -c "python manage.py migrate && python manage.py collectstatic  --no-input && gunicorn app.wsgi:application --bind 0.0.0.0:8000"
    command: sh -c "python manage.py migrate && python manage.py collectstatic --no-input && gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    ports:
      - '8000:8000'
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env.docker
    volumes:
      - .:/code
      - static_volume:/static

  celery_worker:
    build: .
    container_name: celery_worker
    tty: true
    command: celery -A config worker -l INFO -P eventlet
    env_file:
      - .env.docker
    depends_on:
      - redis
      - app
      - postgres

  celery_beat:
    build: .
    container_name: celery_beat
    tty: true
    command: celery -A config beat -l INFO
    env_file:
      - .env.docker
    depends_on:
      - redis
      - app
      - postgres


  nginx:
    image: nginx
    container_name: nginx
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/static
    ports:
      - '80:80'
    depends_on:
      - app


volumes:
  pgdata:
  static_volume: